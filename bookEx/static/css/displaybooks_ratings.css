.displaybooks-table {
}

/* search field */
.search-filter-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 20px;
    margin-bottom: 1.5em;
    flex-wrap: wrap;
}

.search-input-wrapper {
    position: relative;
    flex-grow: 1;
    min-width: 250px;
}

.search-icon {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--input-border-color);
    font-size: 0.9em;
    pointer-events: none;
}

.search-input {
    padding-left: 35px !important;
    width: 100%;
    box-sizing: border-box;
    border-radius: 20px;
    border: 1px solid var(--input-border-color);
    background-color: var(--input-bg-color);
    color: var(--text-color-dark);
    height: 40px;
    font-size: 0.95em;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    margin-bottom: 0;
}

.search-input:focus {
    border-color: var(--active-bg-color);
    box-shadow: 0 0 0 2px rgba(53, 121, 133, 0.2);
    outline: none;
}

.search-input:focus + .search-icon {
    color: var(--active-bg-color);
}

.favorites-filter-placeholder {
    flex-shrink: 0;
    padding: 8px 12px;
    border-radius: 20px;
    background-color: rgba(0, 0, 0, 0.05);
    font-size: 0.9em;
    color: var(--text-color-dark);
    opacity: 0.7;
    cursor: not-allowed;
}

body.dark-mode .search-icon {
    color: var(--input-border-color);
}

body.dark-mode .search-input {
    border-color: var(--input-border-color);
    background-color: var(--input-bg-color);
    color: var(--text-color-light);
}

body.dark-mode .search-input:focus {
    border-color: var(--active-hover-bg-color);
    box-shadow: 0 0 0 2px rgba(90, 174, 189, 0.3);
}

body.dark-mode .search-input:focus + .search-icon {
    color: var(--active-hover-bg-color);
}

body.dark-mode .favorites-filter-placeholder {
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--text-color-light);
}

.favorites-filter-placeholder label {
    opacity: 0.7;
    cursor: not-allowed;
    margin-right: 5px;
}

.favorites-filter-placeholder input[type="checkbox"] {
    vertical-align: middle;
    opacity: 0.5;
    cursor: not-allowed;
}

/* filter toggle */
.favorites-filter-toggle {
    /* Keep existing flex alignment, but adjust gap if needed */
    gap: 12px; /* Slightly increase gap for visual balance */
}

.toggle-switch-label {
    cursor: pointer;
    display: inline-flex; /* Align text and switch horizontally */
    align-items: center;
    gap: 8px; /* Space between text and the visual switch */
    user-select: none; /* Prevent text selection on click */
    position: relative; /* Needed for absolute positioning of input */
    padding: 5px 0; /* Add some vertical padding if needed */
}

/* Hide the actual checkbox visually but keep it functional */
.toggle-switch-label input[type="checkbox"] {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
    pointer-events: none; /* Not strictly necessary when opacity is 0 */
}

/* Style the visual container (the track) */
.toggle-switch-visual {
    display: inline-block;
    position: relative; /* For positioning the knob */
    width: 44px; /* Width of the switch track */
    height: 22px; /* Height of the switch track */
    background-color: #ccc; /* Default background (off state) */
    border-radius: 11px; /* Fully rounded ends */
    transition: background-color 0.3s ease-in-out;
    flex-shrink: 0; /* Prevent shrinking in flex layout */
}

/* Style the knob (the circle) using ::after pseudo-element */
.toggle-switch-visual::after {
    content: '';
    position: absolute;
    top: 2px; /* Positioning within the track */
    left: 2px; /* Start position (off state) */
    width: 18px; /* Diameter of the knob */
    height: 18px; /* Diameter of the knob */
    background-color: white;
    border-radius: 50%; /* Make it a circle */
    transition: transform 0.3s ease-in-out; /* Animate the movement */
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
}

/* --- Checked State --- */

/* Change track background when checkbox is checked */
.toggle-switch-label input[type="checkbox"]:checked + .toggle-switch-visual {
    background-color: var(--active-bg-color); /* Or use a distinct color like #e44d82 for favorites */
    /* Example using a favorite-pink: background-color: #e44d82; */
}

/* Move the knob to the right when checkbox is checked */
.toggle-switch-label input[type="checkbox"]:checked + .toggle-switch-visual::after {
    transform: translateX(22px); /* Moves the knob (Track Width - Knob Width - 2*Offset) = 44 - 18 - 4 = 22 */
}

/* --- Focus State (Accessibility) --- */

/* Add an outline when the hidden checkbox is focused (e.g., via keyboard) */
.toggle-switch-label input[type="checkbox"]:focus + .toggle-switch-visual {
    outline: none; /* Remove default */
    box-shadow: 0 0 0 3px rgba(53, 121, 133, 0.4); /* Use active color with transparency */
    /* Example using favorite-pink focus: box-shadow: 0 0 0 3px rgba(228, 77, 130, 0.4); */
}

/* --- Dark Mode Adjustments --- */

body.dark-mode .toggle-switch-visual {
    background-color: #555; /* Darker grey for off state */
}

body.dark-mode .toggle-switch-label input[type="checkbox"]:checked + .toggle-switch-visual {
    background-color: var(--active-hover-bg-color); /* Use the lighter active color for 'on' state */
    /* Example using favorite-pink: background-color: #e44d82; */
}

body.dark-mode .toggle-switch-visual::after {
    background-color: #ddd; /* Slightly off-white knob */
}

body.dark-mode .toggle-switch-label input[type="checkbox"]:focus + .toggle-switch-visual {
    box-shadow: 0 0 0 3px rgba(90, 174, 189, 0.5); /* Use active hover color */
    /* Example using favorite-pink focus: box-shadow: 0 0 0 3px rgba(228, 77, 130, 0.5); */
}

/* Optional: Adjust label text color in dark mode if needed */
body.dark-mode .toggle-switch-label span:first-child { /* Target the text span */
    color: var(--text-color-light);
}

/* rating styling */
.star-rating {
    display: inline-flex;
    cursor: pointer;
    font-size: 1.3em;
}

.star-rating .star {
    color: #ccc;
    transition: color 0.2s ease-in-out, transform 0.15s ease-out;
    padding: 0 2px;
}

.star-rating:hover .star {
    color: orange;
}

.star-rating .star:hover ~ .star {
    color: #ccc;
}

.star-rating .star.selected {
    color: #fadb14;
}

.star-rating .star.selected ~ .star:not(.selected) {
    color: #ccc;
}

.star-rating .star:active {
    transform: scale(1.2);
}

.star-rating .star.rated {
    color: #fadb14;
}

.star-rating .star.rated ~ .star {
    color: #ccc;
}

.rating-disabled {
    font-size: 0.9em;
    color: var(--text-color-dark);
    opacity: 0.7;
}

.star-rating-display-only .star {
    color: #ccc;
    font-size: 1.1em;
    padding: 0 1px;
    cursor: default;
}

.star-rating-display-only .star.rated {
    color: #fadb14;
}

body.dark-mode .star-rating-display-only .star {
    color: #555;
}

body.dark-mode .star-rating-display-only .star.rated {
    color: #fadb14;
}

body.dark-mode .star-rating .star {
    color: #555;
}

body.dark-mode .star-rating:hover .star {
    color: orange;
}

body.dark-mode .star-rating .star:hover ~ .star {
    color: #555;
}

body.dark-mode .star-rating .star.selected {
    color: #fadb14;
}

body.dark-mode .star-rating .star.selected ~ .star:not(.selected) {
    color: #555;
}

body.dark-mode .star-rating .star.rated {
    color: #fadb14;
}

body.dark-mode .star-rating .star.rated ~ .star {
    color: #555;
}

body.dark-mode .rating-disabled {
    color: var(--text-color-dark);
}